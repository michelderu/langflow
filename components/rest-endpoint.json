{"data":{"edges":[],"nodes":[{"data":{"id":"RESTEndpoint-ki6Re","type":"RESTEndpoint","node":{"template":{"_type":"Component","authentication":{"trace_as_metadata":true,"options":["None / other","Basic","Digest"],"combobox":false,"required":true,"placeholder":"None / other","show":true,"name":"authentication","value":"None / other","display_name":"Authentication type","advanced":false,"dynamic":false,"info":"Authentication type, please also provide username and password","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output, DropdownInput, MultilineInput, SecretStrInput\nfrom langflow.schema import Data\nimport requests, json, re\nfrom requests.auth import HTTPBasicAuth, HTTPDigestAuth\nfrom loguru import logger\n\nclass CustomComponent(Component):\n    display_name = \"REST Endpoint\"\n    description = \"Interact with a REST endpoint.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"RESTEndpoint\"\n\n    inputs = [\n        MessageTextInput(name=\"endpoint\", display_name=\"Endpoint\", required=True, placeholder=\"https://api.restful-api.dev/objects\", info=\"The URL of the REST endpoint\"),\n        DropdownInput(name=\"authentication\", display_name=\"Authentication type\", required=True, options=['None / other', 'Basic', 'Digest'], placeholder='None / other', value='None/other', info=\"Authentication type, please also provide username and password\"),\n        MessageTextInput(name=\"username\", display_name=\"Username\", info=\"Username for Basic or Digest Authentication\"),\n        SecretStrInput(name=\"password\", display_name=\"Password\", info=\"Password for Basic or Digest Authentication\"),\n        DropdownInput(name=\"method\", display_name=\"Method\", required=True, options=['GET', 'POST', 'PUT', 'PATCH', 'DELETE'], placeholder='GET', info=\"Method for calling the REST endpoint\"),\n        MessageTextInput(name=\"query\", display_name=\"Query string\", placeholder=\"id=4&id=6\", info=\"Query string, if any\"),\n        MultilineInput(name=\"headers\", display_name=\"Headers\", placeholder='Content-Type: application/json', value='Content-Type: application/json', info=\"Type your headers as follows:\\nContent-Type: application/json\", is_list=True),\n        MultilineInput(name=\"payload\", display_name=\"Payload\", placeholder='{}', value='{}', info=\"Payload in JSON format\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n        \n    def construct_headers(self, headers: list) -> dict:\n        # Check no headers\n        if len(headers) == 0 or all(header.strip() == \"\" for header in headers):\n            return {}\n        headers = [header.strip() for header in headers]\n        # List should contain semicolons\n        if len(headers) == 0 or all(\":\" not in header for header in headers):\n            raise ValueError(f\"Invalid header string(s), the should be of the form: 'Content-Type: application/json' for instance\")\n        # Construct a dict with headers to be used by requests\n        headers = {header.split(\":\")[0].strip(): header.split(\":\")[1].strip() for header in headers}\n        return headers\n        \n    def build_output(self) -> str:\n        endpoint = self.ensure_url(self.endpoint.strip())\n        method = self.method\n        query = str(self.query.strip() if self.query else '')\n        if query and query != '':\n            endpoint += '?' + query\n        logger.debug(f\"{self.name}: Calling: {endpoint} with method {method}\")\n        \n        authentication = self.authentication\n        username = str(self.username.strip() if self.username else '')\n        password = str(self.password.strip() if self.password else '')\n        if (authentication in [\"Basic\", \"Digest\"] and not all([username, password])):\n            raise ValueError(\"Authentication defined as Basic or Digest but no username and/or password supplied\")\n        logger.debug(f\"{self.name}: Authentication: {authentication}, {username}/{password}\")\n\n        headers = self.construct_headers(self.headers)\n        logger.debug(f\"{self.name}: Headers: {headers}\")\n        \n        try:\n            payload = json.loads(self.payload) if self.payload else {}\n        except json.JSONDecodeError:\n            raise ValueError(f\"Invalid JSON payload: {self.payload}\")\n        logger.debug(f\"{self.name}: Payload: {payload}\")\n            \n        auth = None\n        if (self.authentication == 'Basic' and username and password):\n            auth = HTTPBasicAuth(username, password)\n        if (self.authentication == 'Digest' and username and password):\n            auth = HTTPDigestAuth(username, password)\n\n        response = requests.request(self.method.lower(), endpoint, headers=headers, auth=auth, json=payload)\n        return json.dumps(response.json())","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"endpoint":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"https://api.restful-api.dev/objects","show":true,"name":"endpoint","value":"https://api.restful-api.dev/objects","display_name":"Endpoint","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The URL of the REST endpoint","title_case":false,"type":"str","_input_type":"MessageTextInput"},"headers":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":true,"required":false,"placeholder":"Content-Type: application/json","show":true,"name":"headers","value":["Content-Type: application/json"],"display_name":"Headers","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Type your headers as follows:\nContent-Type: application/json","title_case":false,"type":"str","_input_type":"MultilineInput"},"method":{"trace_as_metadata":true,"options":["GET","POST","PUT","PATCH","DELETE"],"combobox":false,"required":true,"placeholder":"GET","show":true,"name":"method","value":"GET","display_name":"Method","advanced":false,"dynamic":false,"info":"Method for calling the REST endpoint","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"password":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"password","value":"","display_name":"Password","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Password for Basic or Digest Authentication","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"payload":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"{}","show":true,"name":"payload","value":"","display_name":"Payload","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Payload in JSON format","title_case":false,"type":"str","_input_type":"MultilineInput"},"query":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"id=4&id=6","show":true,"name":"query","value":"","display_name":"Query string","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Query string, if any","title_case":false,"type":"str","_input_type":"MessageTextInput"},"username":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"username","value":"","display_name":"Username","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Username for Basic or Digest Authentication","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Interact with a REST endpoint.","icon":"custom_components","base_classes":["Text"],"display_name":"REST Endpoint","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Text"],"selected":"Text","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["endpoint","authentication","username","password","method","query","headers","payload"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19.post2","official":false}},"id":"RESTEndpoint-ki6Re","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Interact with a REST endpoint.","name":"REST Endpoint","id":"RESTEndpoint-ki6Re","is_component":true,"last_tested_version":"1.0.19.post2"}