{
  "id": "e6bec2ab-a89f-4452-a1e9-2c76e92fcb89",
  "data": {
    "nodes": [
      {
        "id": "RecursiveCharacterTextSplitter-gEuNA",
        "type": "genericNode",
        "position": {
          "x": 383.1933944954129,
          "y": 179.56779816513762
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data_input": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_input",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Data"
                ],
                "dynamic": false,
                "info": "The texts to split.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "chunk_overlap": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_overlap",
                "value": 200,
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter, TextSplitter\n\nfrom langflow.base.textsplitters.model import LCTextSplitterComponent\nfrom langflow.inputs.inputs import DataInput, IntInput, MessageTextInput\nfrom langflow.utils.util import unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(LCTextSplitterComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text trying to keep all related text together.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n    name = \"RecursiveCharacterTextSplitter\"\n    icon = \"LangChain\"\n\n    inputs = [\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum length of each chunk.\",\n            value=1000,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"The amount of overlap between chunks.\",\n            value=200,\n        ),\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Input\",\n            info=\"The texts to split.\",\n            input_types=[\"Document\", \"Data\"],\n        ),\n        MessageTextInput(\n            name=\"separators\",\n            display_name=\"Separators\",\n            info='The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n            is_list=True,\n        ),\n    ]\n\n    def get_data_input(self) -> Any:\n        return self.data_input\n\n    def build_text_splitter(self) -> TextSplitter:\n        if not self.separators:\n            separators: list[str] | None = None\n        else:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in self.separators]\n\n        return RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=self.chunk_size,\n            chunk_overlap=self.chunk_overlap,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "separators": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "separators",
                "value": "",
                "display_name": "Separators",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Split text trying to keep all related text together.",
            "icon": "LangChain",
            "base_classes": [
              "Data"
            ],
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "transform_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              }
            ],
            "field_order": [
              "chunk_size",
              "chunk_overlap",
              "data_input",
              "separators"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "langchain_utilities",
            "key": "RecursiveCharacterTextSplitter",
            "lf_version": "1.1.0"
          },
          "type": "RecursiveCharacterTextSplitter",
          "id": "RecursiveCharacterTextSplitter-gEuNA"
        },
        "selected": false,
        "width": 320,
        "height": 475,
        "positionAbsolute": {
          "x": 383.1933944954129,
          "y": 179.56779816513762
        },
        "dragging": false
      },
      {
        "id": "AstraDB-cWxrZ",
        "type": "genericNode",
        "position": {
          "x": 791.831168649135,
          "y": 181.77981651376146
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "embedding_model": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_model",
                "value": "",
                "display_name": "Embedding Model",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "Allows an embedding model configuration.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "advanced_search_filter": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "advanced_search_filter",
                "value": {},
                "display_name": "Search Metadata Filter",
                "advanced": true,
                "dynamic": false,
                "info": "Optional dictionary of filters to apply to the search query.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "api_endpoint": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_endpoint",
                "value": "",
                "display_name": "API Endpoint",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "API endpoint URL for the Astra DB service.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "batch_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "batch_size",
                "value": "",
                "display_name": "Batch Size",
                "advanced": true,
                "dynamic": false,
                "info": "Optional number of data to process in a single batch.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "bulk_delete_concurrency": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "bulk_delete_concurrency",
                "value": "",
                "display_name": "Bulk Delete Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Optional concurrency level for bulk delete operations.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "bulk_insert_batch_concurrency": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "bulk_insert_batch_concurrency",
                "value": "",
                "display_name": "Bulk Insert Batch Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Optional concurrency level for bulk insert operations.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "bulk_insert_overwrite_concurrency": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "bulk_insert_overwrite_concurrency",
                "value": "",
                "display_name": "Bulk Insert Overwrite Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import os\nfrom collections import defaultdict\n\nimport orjson\nfrom astrapy import DataAPIClient\nfrom astrapy.admin import parse_api_endpoint\nfrom langchain_astradb import AstraDBVectorStore\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput, MessageTextInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://docs.langflow.org/starter-projects-vector-store-rag\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    VECTORIZE_PROVIDERS_MAPPING = defaultdict(\n        list,\n        {\n            \"Azure OpenAI\": [\n                \"azureOpenAI\",\n                [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            ],\n            \"Hugging Face - Dedicated\": [\"huggingfaceDedicated\", [\"endpoint-defined-model\"]],\n            \"Hugging Face - Serverless\": [\n                \"huggingface\",\n                [\n                    \"sentence-transformers/all-MiniLM-L6-v2\",\n                    \"intfloat/multilingual-e5-large\",\n                    \"intfloat/multilingual-e5-large-instruct\",\n                    \"BAAI/bge-small-en-v1.5\",\n                    \"BAAI/bge-base-en-v1.5\",\n                    \"BAAI/bge-large-en-v1.5\",\n                ],\n            ],\n            \"Jina AI\": [\n                \"jinaAI\",\n                [\n                    \"jina-embeddings-v2-base-en\",\n                    \"jina-embeddings-v2-base-de\",\n                    \"jina-embeddings-v2-base-es\",\n                    \"jina-embeddings-v2-base-code\",\n                    \"jina-embeddings-v2-base-zh\",\n                ],\n            ],\n            \"Mistral AI\": [\"mistral\", [\"mistral-embed\"]],\n            \"NVIDIA\": [\"nvidia\", [\"NV-Embed-QA\"]],\n            \"OpenAI\": [\"openai\", [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"]],\n            \"Upstage\": [\"upstageAI\", [\"solar-embedding-1-large\"]],\n            \"Voyage AI\": [\n                \"voyageAI\",\n                [\"voyage-large-2-instruct\", \"voyage-law-2\", \"voyage-code-2\", \"voyage-large-2\", \"voyage-2\"],\n            ],\n        },\n    )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"Database\" if os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\" else \"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"embedding_choice\",\n            display_name=\"Embedding Model or Astra Vectorize\",\n            info=\"Determines whether to use Astra Vectorize for the collection.\",\n            options=[\"Embedding Model\", \"Astra Vectorize\"],\n            real_time_refresh=True,\n            value=\"Embedding Model\",\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Allows an embedding model configuration.\",\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            value=\"cosine\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync' or 'Off'.\",\n            options=[\"Sync\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            is_list=True,\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            is_list=True,\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info='Optional JSON string for the \"indexing\" field of the collection. '\n            \"See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"[DEPRECATED] Search Metadata Filter\",\n            info=\"Deprecated: use advanced_search_filter. Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    def del_fields(self, build_config, field_list):\n        for field in field_list:\n            if field in build_config:\n                del build_config[field]\n\n        return build_config\n\n    def insert_in_dict(self, build_config, field_name, new_parameters):\n        # Insert the new key-value pair after the found key\n        for new_field_name, new_parameter in new_parameters.items():\n            # Get all the items as a list of tuples (key, value)\n            items = list(build_config.items())\n\n            # Find the index of the key to insert after\n            idx = len(items)\n            for i, (key, _) in enumerate(items):\n                if key == field_name:\n                    idx = i + 1\n                    break\n\n            items.insert(idx, (new_field_name, new_parameter))\n\n            # Clear the original dictionary and update with the modified items\n            build_config.clear()\n            build_config.update(items)\n\n        return build_config\n\n    def update_providers_mapping(self):\n        # If we don't have token or api_endpoint, we can't fetch the list of providers\n        if not self.token or not self.api_endpoint:\n            self.log(\"Astra DB token and API endpoint are required to fetch the list of Vectorize providers.\")\n\n            return self.VECTORIZE_PROVIDERS_MAPPING\n\n        try:\n            self.log(\"Dynamically updating list of Vectorize providers.\")\n\n            # Get the admin object\n            client = DataAPIClient(token=self.token)\n            admin = client.get_admin()\n\n            # Get the embedding providers\n            db_admin = admin.get_database_admin(self.api_endpoint)\n            embedding_providers = db_admin.find_embedding_providers().as_dict()\n\n            vectorize_providers_mapping = {}\n\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers[\"embeddingProviders\"].items():\n                display_name = provider_data[\"displayName\"]\n                models = [model[\"name\"] for model in provider_data[\"models\"]]\n\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching Vectorize providers: {e}\")\n\n            return self.VECTORIZE_PROVIDERS_MAPPING\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"embedding_choice\":\n            if field_value == \"Astra Vectorize\":\n                self.del_fields(build_config, [\"embedding_model\"])\n\n                # Update the providers mapping\n                vectorize_providers = self.update_providers_mapping()\n\n                new_parameter = DropdownInput(\n                    name=\"embedding_provider\",\n                    display_name=\"Embedding Provider\",\n                    options=vectorize_providers.keys(),\n                    value=\"\",\n                    required=True,\n                    real_time_refresh=True,\n                ).to_dict()\n\n                self.insert_in_dict(build_config, \"embedding_choice\", {\"embedding_provider\": new_parameter})\n            else:\n                self.del_fields(\n                    build_config,\n                    [\n                        \"embedding_provider\",\n                        \"model\",\n                        \"z_01_model_parameters\",\n                        \"z_02_api_key_name\",\n                        \"z_03_provider_api_key\",\n                        \"z_04_authentication\",\n                    ],\n                )\n\n                new_parameter = HandleInput(\n                    name=\"embedding_model\",\n                    display_name=\"Embedding Model\",\n                    input_types=[\"Embeddings\"],\n                    info=\"Allows an embedding model configuration.\",\n                ).to_dict()\n\n                self.insert_in_dict(build_config, \"embedding_choice\", {\"embedding_model\": new_parameter})\n\n        elif field_name == \"embedding_provider\":\n            self.del_fields(\n                build_config,\n                [\"model\", \"z_01_model_parameters\", \"z_02_api_key_name\", \"z_03_provider_api_key\", \"z_04_authentication\"],\n            )\n\n            # Update the providers mapping\n            vectorize_providers = self.update_providers_mapping()\n            model_options = vectorize_providers[field_value][1]\n\n            new_parameter = DropdownInput(\n                name=\"model\",\n                display_name=\"Model\",\n                info=\"The embedding model to use for the selected provider. Each provider has a different set of \"\n                \"models available (full list at \"\n                \"https://docs.datastax.com/en/astra-db-serverless/databases/embedding-generation.html):\\n\\n\"\n                f\"{', '.join(model_options)}\",\n                options=model_options,\n                value=None,\n                required=True,\n                real_time_refresh=True,\n            ).to_dict()\n\n            self.insert_in_dict(build_config, \"embedding_provider\", {\"model\": new_parameter})\n\n        elif field_name == \"model\":\n            self.del_fields(\n                build_config,\n                [\"z_01_model_parameters\", \"z_02_api_key_name\", \"z_03_provider_api_key\", \"z_04_authentication\"],\n            )\n\n            new_parameter_1 = DictInput(\n                name=\"z_01_model_parameters\",\n                display_name=\"Model Parameters\",\n                is_list=True,\n            ).to_dict()\n\n            new_parameter_2 = MessageTextInput(\n                name=\"z_02_api_key_name\",\n                display_name=\"API Key Name\",\n                info=\"The name of the embeddings provider API key stored on Astra. \"\n                \"If set, it will override the 'ProviderKey' in the authentication parameters.\",\n            ).to_dict()\n\n            new_parameter_3 = SecretStrInput(\n                load_from_db=False,\n                name=\"z_03_provider_api_key\",\n                display_name=\"Provider API Key\",\n                info=\"An alternative to the Astra Authentication that passes an API key for the provider \"\n                \"with each request to Astra DB. \"\n                \"This may be used when Vectorize is configured for the collection, \"\n                \"but no corresponding provider secret is stored within Astra's key management system.\",\n            ).to_dict()\n\n            new_parameter_4 = DictInput(\n                name=\"z_04_authentication\",\n                display_name=\"Authentication Parameters\",\n                is_list=True,\n            ).to_dict()\n\n            self.insert_in_dict(\n                build_config,\n                \"model\",\n                {\n                    \"z_01_model_parameters\": new_parameter_1,\n                    \"z_02_api_key_name\": new_parameter_2,\n                    \"z_03_provider_api_key\": new_parameter_3,\n                    \"z_04_authentication\": new_parameter_4,\n                },\n            )\n\n        return build_config\n\n    def build_vectorize_options(self, **kwargs):\n        for attribute in [\n            \"embedding_provider\",\n            \"model\",\n            \"z_01_model_parameters\",\n            \"z_02_api_key_name\",\n            \"z_03_provider_api_key\",\n            \"z_04_authentication\",\n        ]:\n            if not hasattr(self, attribute):\n                setattr(self, attribute, None)\n\n        # Fetch values from kwargs if any self.* attributes are None\n        provider_value = self.VECTORIZE_PROVIDERS_MAPPING.get(self.embedding_provider, [None])[0] or kwargs.get(\n            \"embedding_provider\"\n        )\n        model_name = self.model or kwargs.get(\"model\")\n        authentication = {**(self.z_04_authentication or kwargs.get(\"z_04_authentication\", {}))}\n        parameters = self.z_01_model_parameters or kwargs.get(\"z_01_model_parameters\", {})\n\n        # Set the API key name if provided\n        api_key_name = self.z_02_api_key_name or kwargs.get(\"z_02_api_key_name\")\n        provider_key = self.z_03_provider_api_key or kwargs.get(\"z_03_provider_api_key\")\n        if api_key_name:\n            authentication[\"providerKey\"] = api_key_name\n\n        # Set authentication and parameters to None if no values are provided\n        if not authentication:\n            authentication = None\n        if not parameters:\n            parameters = None\n\n        return {\n            # must match astrapy.info.CollectionVectorServiceOptions\n            \"collection_vector_service_options\": {\n                \"provider\": provider_value,\n                \"modelName\": model_name,\n                \"authentication\": authentication,\n                \"parameters\": parameters,\n            },\n            \"collection_embedding_api_key\": provider_key,\n        }\n\n    @check_cached_vector_store\n    def build_vector_store(self, vectorize_options=None):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError as e:\n            msg = f\"Invalid setup mode: {self.setup_mode}\"\n            raise ValueError(msg) from e\n\n        if self.embedding_choice == \"Embedding Model\":\n            embedding_dict = {\"embedding\": self.embedding_model}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            # Fetch values from kwargs if any self.* attributes are None\n            dict_options = vectorize_options or self.build_vectorize_options()\n\n            # Set the embedding dictionary\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(\n                    dict_options.get(\"collection_vector_service_options\")\n                ),\n                \"collection_embedding_api_key\": dict_options.get(\"collection_embedding_api_key\"),\n            }\n\n        try:\n            vector_store = AstraDBVectorStore(\n                collection_name=self.collection_name,\n                token=self.token,\n                api_endpoint=self.api_endpoint,\n                namespace=self.keyspace or None,\n                environment=parse_api_endpoint(self.api_endpoint).environment if self.api_endpoint else None,\n                metric=self.metric or None,\n                batch_size=self.batch_size or None,\n                bulk_insert_batch_concurrency=self.bulk_insert_batch_concurrency or None,\n                bulk_insert_overwrite_concurrency=self.bulk_insert_overwrite_concurrency or None,\n                bulk_delete_concurrency=self.bulk_delete_concurrency or None,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=self.pre_delete_collection,\n                metadata_indexing_include=[s for s in self.metadata_indexing_include if s] or None,\n                metadata_indexing_exclude=[s for s in self.metadata_indexing_exclude if s] or None,\n                collection_indexing_policy=orjson.dumps(self.collection_indexing_policy)\n                if self.collection_indexing_policy\n                else None,\n                **embedding_dict,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        if self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        return \"similarity\"\n\n    def _build_search_args(self):\n        query = self.search_input if isinstance(self.search_input, str) and self.search_input.strip() else None\n        search_filter = (\n            {k: v for k, v in self.search_filter.items() if k and v and k.strip()} if self.search_filter else None\n        )\n\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n            }\n        elif self.advanced_search_filter or search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n\n        if search_filter:\n            self.log(self.log(f\"`search_filter` is deprecated. Use `advanced_search_filter`. Cleaned: {search_filter}\"))\n            filter_arg.update(search_filter)\n\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_input}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_indexing_policy": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "collection_indexing_policy",
                "value": "",
                "display_name": "Collection Indexing Policy",
                "advanced": true,
                "dynamic": false,
                "info": "Optional JSON string for the \"indexing\" field of the collection. See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "collection_name",
                "value": "deklerk",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "embedding_choice": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Embedding Model",
                  "Astra Vectorize"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_choice",
                "value": "Astra Vectorize",
                "display_name": "Embedding Model or Astra Vectorize",
                "advanced": false,
                "dynamic": false,
                "info": "Determines whether to use Astra Vectorize for the collection.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "keyspace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "keyspace",
                "value": "",
                "display_name": "Keyspace",
                "advanced": true,
                "dynamic": false,
                "info": "Optional keyspace within Astra DB to use for the collection.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "metadata_indexing_exclude": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "metadata_indexing_exclude",
                "value": "",
                "display_name": "Metadata Indexing Exclude",
                "advanced": true,
                "dynamic": false,
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "metadata_indexing_include": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "metadata_indexing_include",
                "value": "",
                "display_name": "Metadata Indexing Include",
                "advanced": true,
                "dynamic": false,
                "info": "Optional list of metadata fields to include in the indexing.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "metric": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "cosine",
                  "dot_product",
                  "euclidean"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "metric",
                "value": "cosine",
                "display_name": "Metric",
                "advanced": true,
                "dynamic": false,
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pre_delete_collection": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "pre_delete_collection",
                "value": false,
                "display_name": "Pre Delete Collection",
                "advanced": true,
                "dynamic": false,
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "search_filter": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_filter",
                "value": {},
                "display_name": "[DEPRECATED] Search Metadata Filter",
                "advanced": true,
                "dynamic": false,
                "info": "Deprecated: use advanced_search_filter. Optional dictionary of filters to apply to the search query.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "search_input": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_input",
                "value": "",
                "display_name": "Search Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "search_score_threshold": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_score_threshold",
                "value": 0,
                "display_name": "Search Score Threshold",
                "advanced": true,
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "search_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_type",
                "value": "Similarity",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "Search type to use",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "setup_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Sync",
                  "Off"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "setup_mode",
                "value": "Sync",
                "display_name": "Setup Mode",
                "advanced": true,
                "dynamic": false,
                "info": "Configuration mode for setting up the vector store, with options like 'Sync' or 'Off'.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "token": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "token",
                "value": "",
                "display_name": "Astra DB Application Token",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              }
            },
            "description": "Implementation of Vector Store using Astra DB with search capabilities",
            "icon": "AstraDB",
            "base_classes": [
              "Data",
              "Retriever"
            ],
            "display_name": "Astra DB",
            "documentation": "https://docs.langflow.org/starter-projects-vector-store-rag",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_endpoint",
                  "collection_name",
                  "token"
                ]
              }
            ],
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "search_input",
              "ingest_data",
              "keyspace",
              "embedding_choice",
              "embedding_model",
              "metric",
              "batch_size",
              "bulk_insert_batch_concurrency",
              "bulk_insert_overwrite_concurrency",
              "bulk_delete_concurrency",
              "setup_mode",
              "pre_delete_collection",
              "metadata_indexing_include",
              "metadata_indexing_exclude",
              "collection_indexing_policy",
              "number_of_results",
              "search_type",
              "search_score_threshold",
              "advanced_search_filter",
              "search_filter"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "type": "AstraDB",
          "id": "AstraDB-cWxrZ",
          "description": "Implementation of Vector Store using Astra DB with search capabilities",
          "display_name": "Astra DB"
        },
        "selected": false,
        "width": 320,
        "height": 749,
        "positionAbsolute": {
          "x": 791.831168649135,
          "y": 181.77981651376146
        },
        "dragging": false
      },
      {
        "id": "URL-cJwGT",
        "type": "genericNode",
        "position": {
          "x": -22.870124966910055,
          "y": 185.22544372623918
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, by clicking the '+' button.\",\n            is_list=True,\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Text",
                  "Raw HTML"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "format",
                "value": "Text",
                "display_name": "Output Format",
                "advanced": false,
                "dynamic": false,
                "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "urls": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "urls",
                "value": [
                  ""
                ],
                "display_name": "URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter one or more URLs, by clicking the '+' button.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Fetch content from one or more URLs.",
            "icon": "layout-template",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "URL",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "fetch_content",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "fetch_content_text",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "urls",
              "format"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "type": "URL",
          "id": "URL-cJwGT",
          "description": "Fetch content from one or more URLs.",
          "display_name": "URL"
        },
        "selected": false,
        "width": 320,
        "height": 368,
        "positionAbsolute": {
          "x": -22.870124966910055,
          "y": 185.22544372623918
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-uAi6A",
        "type": "genericNode",
        "position": {
          "x": -426.87575195351576,
          "y": 183.4777981651378
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CustomComponent(Component):\n    display_name = \"URL list\"\n    description = \"Provide a list of URL to be processed.\"\n    icon = \"code\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"URLs\",\n            info=\"URL list (newline separated)\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> list[Message]:\n        urls = self.input_value.split(\"\\n\")\n        data = []\n        for url in urls:\n            data.append(Message(text=url))\n        self.status = data\n        return data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "https://www.deklerkbv.nl/nl/\nhttps://www.deklerkbv.nl/nl/contact/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/heischepen/\nhttps://www.deklerkbv.nl/nl/staalconstructie/goed-geoutilleerd/\nhttps://www.deklerkbv.nl/nl/staalconstructie/productie/\nhttps://www.deklerkbv.nl/nl/staalconstructie/specials/\nhttps://www.deklerkbv.nl/nl/staalconstructie/civiel/\nhttps://www.deklerkbv.nl/nl/staalconstructie/offshore/\nhttps://www.deklerkbv.nl/nl/staalconstructie/ijzersterk-in-staal/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/zaan/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/inspectievaartuig-giessen/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/tenderboat-schie/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/kraanponton-donge/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/heischepen/westerschelde/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/heischepen/noord/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/heischepen/biesbosch/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/merwede/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/gouwzee/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/volkerak/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/tenderboat-mark/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/tenderboat-hollands-diep/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/sleepboot-urk/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/liebherr-l550-x-power/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/giant-g2700-x-tra-hdplus/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/unic-urw506-spidercrane/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/takeuchi-tb-285/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/liebherr-r956/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/liebherr-r926-compact/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/liebherr-a918-compact/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/zijpe/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/linge/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/krammer/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/ijmeer/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/haringvliet/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/kraanschepen/overzichtsblad-baggermaterieel/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/liebherr-a312/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/sennebogen-653e/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/survey-z-boat-singlebeam/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/surveyvaartuig-spui/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/overig-materieel/overzichtsblad-surveymaterieel/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/ijssel/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/waal/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/vecht/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/spaarne-2/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/spaarne-1/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/schelde/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/rijn/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/pieter-de-klerk/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/oosterschelde/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/maas/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/lek/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/kreekrak/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/grevelingen/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/eem/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/donge/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/dieze/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/amer-2/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/amer-1/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/pontons/overzichtsblad-pontons/\nhttps://www.deklerkbv.nl/nl/waterbouw/binnenstedelijke-waterbouw/\nhttps://www.deklerkbv.nl/nl/waterbouw/onderhoud-bruggen-en-sluizen/\nhttps://www.deklerkbv.nl/nl/waterbouw/hei--hijs--en-bergingswerk/\nhttps://www.deklerkbv.nl/nl/waterbouw/bagger--kust--en-oeverwerk/\nhttps://www.deklerkbv.nl/nl/waterbouw/constructieve-waterbouw/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/\nhttps://www.deklerkbv.nl/nl/algemene-voorwaarden/\nhttps://www.deklerkbv.nl/nl/privacyverklaring/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/werkschepen/gouwe/\nhttps://www.deklerkbv.nl/nl/over-ons/missie-en-visie/\nhttps://www.deklerkbv.nl/nl/projecten/\nhttps://www.deklerkbv.nl/nl/nieuws/reis-mee-door-de-tijd.../\nhttps://www.deklerkbv.nl/nl/nieuws/jubileumeditie-met-het-oog-op-morgen-165-jaar-de-klerk-werkendam/\nhttps://www.deklerkbv.nl/nl/nieuws/van-de-sasdijk-naar-de-beatrixhaven/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/lbc-rotterdam/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/scheepvaartbebording-rotterdam/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/oeverbescherming-amsterdam/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/goese-kade/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/werkzaamheden-oostsluis-terneuzen/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/zeevaartkade-quarleshaven-vlissingen-oost/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/remmingwerk-stena-line-beneluxhaven-rotterdam/\nhttps://www.deklerkbv.nl/nl/projecten/pagina-2/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/oeververvanging-gouwe-t93w-t95w/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/vernieuwen-brug-108-amsterdam/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/verlengen-vingerpier-afrikahaven/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/lbc-fase-2/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/jetty-5e-petroleumhaven/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/kade-en-drijvende-steigers-voor-north-sea-port/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/small-scales-breda/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/renovatie-nassaukade-rotterdam/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/loopbruggen-borssele-steiger-zeeland-refinery/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/baggerwerk-zandkreekgeul/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/boord-boord-overslagfaciliteiten-mercuriushaven-amsterdam/\nhttps://www.deklerkbv.nl/nl/projecten/waterbouw/renovatie-kade-het-nieuwe-werk-den-helder/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/taatskuipen/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/wrijfschotten-stena-line/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/afmeervoorziening-duwbakkenligplaatsen-brienenoord/\nhttps://www.deklerkbv.nl/nl/projecten/staalconstructie/modular-pedestal/\nhttps://www.deklerkbv.nl/nl/nieuws/nabehandelingsinstallatie-gouwzee/\nhttps://www.deklerkbv.nl/nl/materieelverhuur/\nhttps://www.deklerkbv.nl/nl/staalconstructie/\nhttps://www.deklerkbv.nl/nl/waterbouw/\nhttps://www.deklerkbv.nl/nl/over-ons/\nhttps://www.deklerkbv.nl/nl/zoeken/\nhttps://www.deklerkbv.nl/nl/vacatures/\nhttps://www.deklerkbv.nl/nl/nieuws/\nhttps://www.deklerkbv.nl/nl/\nhttps://www.deklerkbv.nl/nl/vacatures/calculator-waterbouw/\nhttps://www.deklerkbv.nl/nl/vacatures/emvi-schrijver/\nhttps://www.deklerkbv.nl/nl/vacatures/tekenaar--modelleur/\nhttps://www.deklerkbv.nl/nl/vacatures/constructiebankwerker--lasser-staalconstructie/\nhttps://www.deklerkbv.nl/nl/vacatures/werkvoorbereider-waterbouw/\nhttps://www.deklerkbv.nl/nl/vacatures/calculator-werkvoorbereider-staalconstructie/\nhttps://www.deklerkbv.nl/nl/vacatures/heier-schipper-westerschelde/\nhttps://www.deklerkbv.nl/nl/vacatures/ontwerpleider/\nhttps://www.deklerkbv.nl/nl/vacatures/constructeur/\nhttps://www.deklerkbv.nl/nl/nieuws/pagina-4/\nhttps://www.deklerkbv.nl/nl/nieuws/pagina-3/\nhttps://www.deklerkbv.nl/nl/nieuws/pagina-2/\nhttps://www.deklerkbv.nl/nl/nieuws/10e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/24-fundatie-cirkels-voor-windplanblauw/\nhttps://www.deklerkbv.nl/nl/nieuws/boord-boord-overslagfaciliteiten-mercuriushaven-opgeleverd/\nhttps://www.deklerkbv.nl/nl/nieuws/11e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/infratech-2023/\nhttps://www.deklerkbv.nl/nl/nieuws/succesvolle-beursweek-op-infratech-2023/\nhttps://www.deklerkbv.nl/nl/nieuws/haveninrichting-dolderman-dordrecht/\nhttps://www.deklerkbv.nl/nl/nieuws/wnf-bedrijvenverklaring/\nhttps://www.deklerkbv.nl/nl/nieuws/co2-nieuwsupdate/\nhttps://www.deklerkbv.nl/nl/nieuws/steiger-lbc-in-otar-magazine/\nhttps://www.deklerkbv.nl/nl/nieuws/buispaal-geplaatst-met-s-werelds-grootste-vm-trilblok/\nhttps://www.deklerkbv.nl/nl/nieuws/5e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/damwand-zelling/\nhttps://www.deklerkbv.nl/nl/nieuws/alliantie-klimaatactie/\nhttps://www.deklerkbv.nl/nl/nieuws/6e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/19-jaar-oude-heikraan-weer-als-nieuw-na-duurzame-revisie/\nhttps://www.deklerkbv.nl/nl/nieuws/7e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/eerste-paal-nieuw-kantoorpand-de-klerk-staalconstructie/\nhttps://www.deklerkbv.nl/nl/nieuws/8e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/baggeren-zandkreekgeul-en-suppleren-slikken-verdronken-land-van-zuid-beveland/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-dokbrug-vlissingen/\nhttps://www.deklerkbv.nl/nl/nieuws/opening-nieuw-kantoor-de-klerk-staalconstructie/\nhttps://www.deklerkbv.nl/nl/nieuws/9e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/veilige-en-comfortable-pbms-voor-de-klerk-medewerkers/\nhttps://www.deklerkbv.nl/nl/nieuws/verduurzaming-werkschip-zijpe/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-kade-quarleshaven-vlissingen/\nhttps://www.deklerkbv.nl/nl/nieuws/pluimpje-voor-de-aannemer/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-cnc-brandsnijmachine/\nhttps://www.deklerkbv.nl/nl/nieuws/wereldprimeur-met-hermotorisering-ms-noord/\nhttps://www.deklerkbv.nl/nl/nieuws/wereldhavendagen-rotterdam/\nhttps://www.deklerkbv.nl/nl/over-ons/co2-prestatieladder/\nhttps://www.deklerkbv.nl/nl/nieuws/1e-uitgave-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-motoren-ms-ijmeer/\nhttps://www.deklerkbv.nl/nl/nieuws/vernieuwen-brug-108-amsterdam/\nhttps://www.deklerkbv.nl/nl/nieuws/uitbreiding-steiger-10-odfjell/\nhttps://www.deklerkbv.nl/nl/nieuws/werk-in-uitvoering-de-klerk-in-miniworld-rotterdam/\nhttps://www.deklerkbv.nl/nl/nieuws/2e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/kade-en-kraanbaan-city-terminal-kramer/\nhttps://www.deklerkbv.nl/nl/nieuws/3e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/infratech-2019/\nhttps://www.deklerkbv.nl/nl/nieuws/green-deal-duurzaam-gww-20/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-bedrijfsfilms/\nhttps://www.deklerkbv.nl/nl/nieuws/oeververvanging-t93-en-t95-opgeleverd/\nhttps://www.deklerkbv.nl/nl/disclaimer/\nhttps://www.deklerkbv.nl/nl/nieuws/labrujere-kleurt-blauw-en-goud/\nhttps://www.deklerkbv.nl/nl/nieuws/bouwopdracht-600-meter-kademuur-koole-tankstorage-botlek/\nhttps://www.deklerkbv.nl/nl/nieuws/kwalificatie-lassen-s690/\nhttps://www.deklerkbv.nl/nl/nieuws/bouw-en-hout-convenant/\nhttps://www.deklerkbv.nl/nl/nieuws/certificaat-ce/\nhttps://www.deklerkbv.nl/nl/nieuws/bewuste-bouwers/\nhttps://www.deklerkbv.nl/nl/nieuws/carbon-footprint/\nhttps://www.deklerkbv.nl/nl/nieuws/reuzenrad-pier-scheveningen/\nhttps://www.deklerkbv.nl/nl/nieuws/europees-sociaal-fonds/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-volkswagen-id-buzz-cargos/\nhttps://www.deklerkbv.nl/nl/nieuws/terugblik-opendag-voortgezet-onderwijs/\nhttps://www.deklerkbv.nl/nl/nieuws/elektromotor-aan-en-gaan!/\nhttps://www.deklerkbv.nl/nl/nieuws/combinatie-hakkers-%E2%80%93-van-oord-de-klerk-krijgt-opdracht-voor-de-eerste-fase-van-de-verbreding-van-het-yangtzekanaal/\nhttps://www.deklerkbv.nl/nl/nieuws/12e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/veilige-heigording/\nhttps://www.deklerkbv.nl/nl/nieuws/13e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/nieuwe-liebherr-lr1130.1-unplugged-elektrische-kraan-voor-de-klerk/\nhttps://www.deklerkbv.nl/nl/vacatures/ict-servicedesk-werkplekbeheerder/\nhttps://www.deklerkbv.nl/nl/vacatures/constructiebankwerker-lasser-werkplaats-woudrichem/\nhttps://www.deklerkbv.nl/nl/nieuws/4e-editie-met-het-oog-op-morgen/\nhttps://www.deklerkbv.nl/nl/nieuws/wmi-werk-bezoek/\nhttps://www.deklerkbv.nl/nl/over-ons/historie/\nhttps://www.deklerkbv.nl/nl/over-ons/veiligheid/\nhttps://www.deklerkbv.nl/nl/over-ons/bedrijfsfilms/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/constructiebankwerker-lasser-geurt-verhoef/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/lascoordinatorlasonderzoeker-leendert-de-waal/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/tekenaarmodelleur-tom-de-laat/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/meewerkend-voorman-mylan-heijns/\nhttps://www.deklerkbv.nl/nl/over-ons/certificering/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/chef-werkplaats-devlin-lievaart/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/salarisadministrateur-hanneke-van-den-heuvel/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/kraanmachinist-gerwin-pijl/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/schipper-remmingwerker-tonny-bras/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/uitvoerder-bart-adriaanse/\nhttps://www.deklerkbv.nl/nl/onze-medewerkers-en-hun-functies/veiligheidskundige-martijn-vos/",
                "display_name": "URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "URL list (newline separated)",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Provide a list of URL to be processed.",
            "icon": "code",
            "base_classes": [
              "Message"
            ],
            "display_name": "URL list",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "type": "CustomComponent",
          "id": "CustomComponent-uAi6A"
        },
        "selected": false,
        "width": 320,
        "height": 234,
        "positionAbsolute": {
          "x": -426.87575195351576,
          "y": 183.4777981651378
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "RecursiveCharacterTextSplitter-gEuNA",
        "sourceHandle": "{œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-gEuNAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "AstraDB-cWxrZ",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-cWxrZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "AstraDB-cWxrZ",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-gEuNA",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-gEuNA{œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-gEuNAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-AstraDB-cWxrZ{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-cWxrZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-uAi6A",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-uAi6Aœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "URL-cJwGT",
        "targetHandle": "{œfieldNameœ:œurlsœ,œidœ:œURL-cJwGTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "urls",
            "id": "URL-cJwGT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-uAi6A",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-uAi6A{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-uAi6Aœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-URL-cJwGT{œfieldNameœ:œurlsœ,œidœ:œURL-cJwGTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "URL-cJwGT",
        "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-cJwGTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "RecursiveCharacterTextSplitter-gEuNA",
        "targetHandle": "{œfieldNameœ:œseparatorsœ,œidœ:œRecursiveCharacterTextSplitter-gEuNAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "separators",
            "id": "RecursiveCharacterTextSplitter-gEuNA",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-cJwGT",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-URL-cJwGT{œdataTypeœ:œURLœ,œidœ:œURL-cJwGTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-RecursiveCharacterTextSplitter-gEuNA{œfieldNameœ:œseparatorsœ,œidœ:œRecursiveCharacterTextSplitter-gEuNAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 867.5564775728594,
      "y": -112.90337615343401,
      "zoom": 0.9046657160071335
    }
  },
  "description": "Create Powerful Connections, Boost Business Value.",
  "name": "De Klerk BV (ingest)",
  "last_tested_version": "1.1.1",
  "endpoint_name": null,
  "is_component": false
}